(defrel (lookupo_syn x env t)
  (fresh (rest y v)
        (== `((,y ,v) . ,rest) env)
        (conde ((== y x) (== v t))
               ((=/= y x) (lookupo_syn x rest t)))))

(defrel (not_in_envo_syn x env)
  (conde ((fresh (y v rest)
             (== env `((,y ,v) . ,rest))
             (=/= y x)
             (not_in_envo_syn x rest)))
         ((== '() env))))

(defrel (proper_listo_syn es env rs)
   (conde ((== '() es) (== '() rs))
          ((fresh (e d te td)
             (== es `(,e . ,d))
             (== rs `(,te . ,td))
             (evalo_syn e env `(val ,te))
             (proper_listo_syn d env td)))))

(defrel (evalo_syn term env r)
    (conde ((fresh (t)
               (== term `(seq ((symb 'quote) ,t)))
               (== r `(val ,t))
               (not_in_envo_syn 'quote env)))
           ((fresh (es rs)
              (== term `(seq ((symb 'list) . ,es)))
              (== r `(val (seq ,rs)))
              (not_in_envo_syn 'list env)
              (proper_listo_syn es env rs)))
           ((fresh (s)
              (== term `(symb ,s))
              (lookupo_syn s env r)))
           ((fresh ( func   arge   arg   x   body )
            (fresh (env2)
              (== term `(seq (,func ,arge)))
              (evalo_syn arge env arg)
              (evalo_syn func env `(closure (,x ,body ,env2)))
              (evalo_syn body `((,x ,arg) . ,env2) r)) ))
           ((fresh (x body)
              (== term `(seq ((symb 'lambda) (seq ((symb ,x))) ,body)))
              (not_in_envo_syn 'lambda env)
              (== r `(closure (,x ,body ,env)))))))
